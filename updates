<template>
    <!-- 🔍 Product Selection Component -->
    <c-product-selection onaddtocart={handleAddToCart}></c-product-selection>

    <!-- 🛒 Cart Table -->
    <template if:true={cartItems.length}>
        <lightning-card title="Cart">
            <lightning-datatable
                key-field="id"
                data={cartItems}
                columns={columns}
                onsave={handleQuantityChange}
                onrowaction={handleDeleteItem}
                draft-values={draftValues}
                hide-checkbox-column>
            </lightning-datatable>

            <div class="slds-p-around_medium">
                <lightning-button label="Checkout" onclick={handleCheckout} variant="brand"></lightning-button>
            </div>
        </lightning-card>
    </template>
</template>


import { LightningElement, track } from 'lwc';

export default class CartDetails extends LightningElement {
    @track cartItems = [];
    @track draftValues = [];

    columns = [
        { label: 'Product Name', fieldName: 'name' },
        {
            label: 'Quantity',
            fieldName: 'quantity',
            type: 'number',
            editable: true
        },
        { label: 'Price', fieldName: 'price', type: 'currency' },
        {
            type: 'button-icon',
            fixedWidth: 40,
            typeAttributes: {
                iconName: 'utility:delete',
                name: 'delete',
                title: 'Delete',
                alternativeText: 'Delete',
                variant: 'bare'
            }
        }
    ];

    // 🔁 Handle Add to Cart from child component
    handleAddToCart(event) {
        const product = event.detail;
        let found = false;

        this.cartItems = this.cartItems.map(item => {
            if (item.id === product.id) {
                found = true;
                if (item.quantity + 1 <= product.availableQuantity) {
                    item.quantity += 1;
                }
            }
            return item;
        });

        if (!found) {
            this.cartItems = [...this.cartItems, product];
        }
    }

    handleQuantityChange(event) {
        const updates = event.detail.draftValues;

        updates.forEach(update => {
            const item = this.cartItems.find(p => p.id === update.id);
            const newQty = parseInt(update.quantity, 10);

            if (newQty > 0 && newQty <= item.availableQuantity) {
                item.quantity = newQty;
            } else {
                alert('Quantity must be between 1 and available stock.');
            }
        });

        this.draftValues = [];
    }

    handleDeleteItem(event) {
        const id = event.detail.row.id;
        this.cartItems = this.cartItems.filter(item => item.id !== id);
    }

    handleCheckout() {
        alert('Checkout complete (simulate DML here)');
        this.cartItems = [];
    }
}
