<template>
    <lightning-card title="Cart Details">
        <template if:true={cartItems}>
            <lightning-datatable
                key-field="id"
                data={cartItems}
                columns={columns}
                onsave={handleQuantityChange}
                onrowaction={handleRowAction}
                draft-values={draftValues}
                hide-checkbox-column>
            </lightning-datatable>

            <div class="slds-p-around_medium">
                <lightning-button
                    label="Checkout"
                    variant="brand"
                    onclick={handleCheckout}>
                </lightning-button>
            </div>
        </template>
        <template if:false={cartItems}>
            <p class="slds-p-around_medium">No items in cart.</p>
        </template>
    </lightning-card>
</template>



import { LightningElement, api, track } from 'lwc';

export default class CartDetails extends LightningElement {
    @api cartItems = [];
    @track draftValues = [];

    columns = [
        { label: 'Product Name', fieldName: 'name' },
        {
            label: 'Quantity',
            fieldName: 'quantity',
            type: 'number',
            editable: true
        },
        { label: 'Price', fieldName: 'price', type: 'currency' },
        {
            type: 'button-icon',
            fixedWidth: 50,
            typeAttributes: {
                iconName: 'utility:delete',
                name: 'delete',
                title: 'Delete',
                alternativeText: 'Delete',
                variant: 'bare'
            }
        }
    ];

    handleQuantityChange(event) {
        const updated = event.detail.draftValues;

        updated.forEach(item => {
            const id = item.id;
            const quantity = parseInt(item.quantity, 10);

            if (isNaN(quantity) || quantity <= 0) {
                alert('Quantity must be a positive number.');
                return;
            }

            this.dispatchEvent(new CustomEvent('quantitychange', {
                detail: { id, quantity }
            }));
        });

        this.draftValues = [];
    }

    handleRowAction(event) {
        const actionName = event.detail.action.name;
        const row = event.detail.row;

        if (actionName === 'delete') {
            this.dispatchEvent(new CustomEvent('deleteitem', {
                detail: row.id
            }));
        }
    }

    handleCheckout() {
        this.dispatchEvent(new CustomEvent('checkout'));
    }
}



<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>60.0</apiVersion>
    <isExposed>true</isExposed>
    <targets>
        <target>lightning__AppPage</target>
        <target>lightning__RecordPage</target>
        <target>lightning__HomePage</target>
    </targets>
</LightningComponentBundle>



<c-cart-details
    cart-items={cartItems}
    onquantitychange={handleQuantityUpdate}
    ondeleteitem={handleDelete}
    oncheckout={handleCheckout}>
</c-cart-details>



@track cartItems = [
    { id: 'p1', name: 'Monitor', quantity: 1, price: 500 },
    { id: 'p2', name: 'Mouse', quantity: 2, price: 150 }
];

handleQuantityUpdate(event) {
    console.log('Updated Quantity:', event.detail);
}

handleDelete(event) {
    console.log('Delete Item:', event.detail);
}

handleCheckout() {
    console.log('Checking out...');
}
